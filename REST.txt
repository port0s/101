REST não é um protocolo ou padrão,
mas sim um conjunto de restrições de arquitetura.
Os desenvolvedores de API podem implementar a arquitetura REST de maneiras variadas.

Ter uma arquitetura cliente/servidor
formada por clientes, servidores e recursos,
com solicitações gerenciadas por HTTP.

Estabelecer uma comunicação stateless
entre cliente e servidor.

Isso significa que nenhuma informação do cliente
é armazenada entre solicitações GET e
toda as solicitações são separadas e desconectadas.
Armazenar dados em cache para otimizar as interações entre cliente e servidor.

Ter uma interface uniforme entre os componentes
para as informações serem transferidas em um formato padronizado.
Para tanto, é necessário que:

    Os recursos solicitados sejam identificáveis e estejam separados das representações enviadas ao cliente;
    Os recursos possam ser manipulados pelo cliente por meio da representação recebida com informações suficientes para tais ações;
    As mensagens autodescritivas retornadas ao cliente contenham informações suficientes para descrever como processá-las;
    Hipertexto e hipermídia estão disponíveis. Isso significa que após acessar um recurso, o cliente pode usar hiperlinks para encontrar as demais ações disponíveis para ele no momento.
    
    
    Ter um sistema em camadas
    que organiza os tipos de servidores
    (responsáveis pela segurança, pelo carregamento de carga e assim por diante)
    envolvidos na recuperação das informações solicitadas em hierarquias que o cliente não pode ver.

Possibilitar código sob demanda (opcional):
a capacidade de enviar um código executável
do servidor para o cliente quando solicitado
para ampliar a funcionalidade disponível ao cliente. 

